buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = 'Fabric'
			url = 'http://maven.modmuss50.me/'
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.0-SNAPSHOT"
		//classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
	}
}

plugins {
	//id 'java'
	//id 'eclipse'
	//id 'idea'
	id 'maven-publish'
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "infraredstone"


ext {
	standardVersion = "1.1.0"
	mcVersion = "19w06a"
}

repositories {
	flatDir {
		// here until farfetchd gets stuff in a maven
		dirs 'libs'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:19w06a"
	mappings "net.fabricmc:yarn:19w06a.3"
	modCompile "net.fabricmc:fabric-loader:0.3.5.106"
	modCompile "net.fabricmc:fabric:0.2.0.89"
	//implementation 'org.jetbrains:annotations:15.0'
	modCompile "io.github.prospector.silk:SilkAPI:1.0.0-26"
	modCompile name: "qcommon-architect-1.0.1-dev"
	modCompile name: "qcommon-croco-1.0.4-dev"
}

if (System.properties["release"] == null) {
	def branch
	if (System.env.BRANCH_NAME) {
		// Jenkins support
		branch = System.env.BRANCH_NAME
		branch = branch.substring(branch.lastIndexOf('/')+1)
	} else {
		branch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.trim()
	}
	if (branch == "HEAD") {
		branch = 'git rev-parse --short HEAD'.execute().in.text.trim()
	}
	def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
	def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()
	version = branch+'-'+ext.standardVersion+'.'+commits+(dirty ? '-dirty' : '')+'+'+ext.mcVersion
} else {
	version = ext.standardVersion+'+'+ext.mcVersion
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = 'javadoc'
}

publishing {
	publications {
		mavenPrimary(MavenPublication) {
			groupId "com.elytradev"
			artifactId = "infraredstone-fabric"
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}
if (file('private.gradle').exists()) {
	apply from: 'private.gradle'
}
